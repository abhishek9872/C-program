#include <stdio.h>
#include <limits.h>

#define INF INT_MAX

int min(int a, int b) {
    return (a < b) ? a : b;
}

int shortestPath(int V, int graph[V][V]) {
    int cost[V];

    cost[V-1] = 0;

    for (int i = V - 2; i >= 0; i--) {
        cost[i] = INF;

        for (int k = i + 1; k < V; k++) {
            if (graph[i][k] != INF) {
                cost[i] = min(cost[i], graph[i][k] + cost[k]);
            }
        }
    }

    return cost[0];
}

int main() {
    int V;
    printf("Enter total number of nodes in the graph: ");
    scanf("%d", &V);

    int graph[V][V];

    printf("Enter the adjacency matrix (use %d for infinity):\n", INF);
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (i == j) {
                graph[i][j] = INF;
            } else {
                printf("Enter the distance between %d and %d: ", i, j);
                scanf("%d", &graph[i][j]);
            }
        }
    }

    int minCost = shortestPath(V, graph);
    printf("Minimum cost from source to destination: %d\n", minCost);

    return 0;
}
/*{{INF, 1, 2, 5, INF, INF, INF, INF}, 
       {INF, INF, INF, INF, 4, 11, INF, INF}, 
       {INF, INF, INF, INF, 9, 5, 16, INF}, 
       {INF, INF, INF, INF, INF, INF, 2, INF}, 
       {INF, INF, INF, INF, INF, INF, INF, 18}, 
       {INF, INF, INF, INF, INF, INF, INF, 13}, 
       {INF, INF, INF, INF, INF, INF, INF, 2}, 
      {INF, INF, INF, INF, INF, INF, INF, INF}}; */
Output:
Minimum cost from source to destination: 9

